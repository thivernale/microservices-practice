apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mysql
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  strategy: { }
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql:8.3.0
          name: mysql
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mysql_root_password
                  name: mysql-secrets
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-data
            - mountPath: /docker-entrypoint-initdb.d
              name: mysql-initdb-config
              readOnly: true

      volumes:
        - name: mysql-data
          persistentVolumeClaim:
            claimName: mysql-pvc
        - name: mysql-initdb-config
          configMap:
            name: mysql-initdb-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mysql
  name: mysql
spec:
  ports:
    - port: 3306
      protocol: TCP
      targetPort: 3306
  selector:
    app: mysql
  type: ClusterIP
---
apiVersion: v1
kind: Secret
data:
  mysql_root_password: cm9vdA==
metadata:
  name: mysql-secrets
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  storageClassName: 'hostpath'
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 1Gi
  hostPath:
    path: "/run/desktop/mnt/host/c/Users/thive/projects/microservices-practice/data/mysql"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  storageClassName: 'hostpath'
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS `inventory-service`;
    CREATE DATABASE IF NOT EXISTS `order-service`;
    CREATE DATABASE IF NOT EXISTS `payment-service`;
